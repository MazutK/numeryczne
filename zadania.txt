# schemat Hornera - wyznaczanie wartosci wielomianu w pkt
def main():
    n = int(input("Podaj stopień wielomianu: "))
    coeffs = []
    for i in range(n, -1, -1):
        liczba = float(input(f"x^{i}: "))
        
    coeffs.append(liczba)
    x0 = float(input("Podaj x₀: "))

    result = 0
    for c in coeffs:
        result = result * x0 + c

    print(f"Wartość wielomianu w punkcie {x0} = {result}")
    
if __name__ == "__main__":
    main()

# schemat Hornera - dzielenie wielomianu przez dwumian

def main():
    n = int(input("Podaj stopień wielomianu: "))
    coeffs = [float(input(f"x^{i}: ")) for i in range(n, -1, -1)]
    a = float(input("Podaj wartość a (dla dzielenia przez x - a): "))

    q = [coeffs[0]]
    for c in coeffs[1:]:
        q.append(q[-1] * a + c)

    remainder = q.pop()
    print(f"Iloraz: {q}")
    print(f"Reszta: {remainder}")

if __name__ == "__main__":
    main()


# rozwiazywanie rownan nieliniowych metoda bisekcji -> znalezienie pierwiastka rzeczywistego rownania x^3 - x - 1 = 0 w przedziale [0;1] z dokladnoscia do E = 0,01

def f(x):
    return x**3 - x - 1

def bisection(a, b, eps=0.01, max_iter=100):
    if f(a) * f(b) >= 0:
        raise ValueError("Brak zmiany znaku – wybierz inny przedział.")

    for i in range(max_iter):
        c = (a + b) / 2
        if abs(f(c)) < eps or abs(b - a) / 2 < eps:
            print(f"Zbieżność w {i+1} iteracjach")
            return c
        if f(a) * f(c) < 0:
            b = c
        else:
            a = c
    print("Osiągnięto maksymalną liczbę iteracji")
    return c

def main():
    a, b = 0, 1
    root = bisection(a, b)
    print(f"Przybliżony pierwiastek: {root:.5f}")

if __name__ == "__main__":
    main()





# rozwiązywanie równań nieliniowych metodą stycznych - znaleźć dodatni pierwiastek równania sin(x) - 1/2 * x = 0, w przedziale [pi/2, pi] z dokładnością do E = 0.01
import math
import math
from sympy import symbols, sin, lambdify, diff

x = symbols('x')
f_expr = sin(x) - 0.5 * x
f = lambdify(x, f_expr)
f_prime = lambdify(x, diff(f_expr, x))

def newton(f, f_prime, x0, eps=0.01, max_iter=100):
    for i in range(max_iter):
        x1 = x0 - f(x0) / f_prime(x0)
        if abs(x1 - x0) <= eps:
            print(f"Zbieżność osiągnięta w {i+1} iteracjach")
            return x1
        x0 = x1
    print("Osiągnięto maksymalną liczbę iteracji")
    return x0

def main():
    a, b = math.pi / 2, math.pi
    if f(a) * f(b) >= 0:
        raise ValueError("Brak zmiany znaku w przedziale – wybierz inny przedział.")

    x0 = a if f(a) * f_prime(a) > 0 else b
    print(f"Wybrany punkt startowy: {x0:.4f}")

    root = newton(f, f_prime, x0)
    print(f"Przybliżony pierwiastek: {float(root):.4f}")

if __name__ == "__main__":
    main()

# rozwiązywanie równań nieliniowych metoda siecznych -> znaleźć pierwiastek równania x^3 + x^2 - 3x - 3 = 0, w przedziale [1;2] z dokładnościa E = 0,0001
def f(x):
    return x**3 + x**2 - 3*x - 3

def secant(x0, x1, eps=1e-4, max_iter=100):
    if f(x0) * f(x1) >= 0:
        raise ValueError("Brak zmiany znaku – wybierz inny przedział.")

    for i in range(max_iter):
        x2 = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0))
        if abs(x2 - x1) < eps:
            print(f"Zbieżność w {i+1} iteracjach")
            return x2
        x0, x1 = x1, x2

    print("Osiągnięto maksymalną liczbę iteracji")
    return x1

def main():
    x0, x1 = 1.0, 2.0
    root = secant(x0, x1)
    print(f"Pierwiastek ≈ {root}")

if __name__ == "__main__":
    main()



# rozwiązanie równań nieliniowych metodą regula falsi -> znaleźć rzeczywisty pierwiastek równania 3 * x - cosx - 1 w przedziale [0.25,0.75] z przybliżeniem E = 0,00001
import math

def f(x):
    return 3 * x - math.cos(x) - 1

def regula_falsi(a, b, eps=1e-5, max_iter=100):
    if f(a) * f(b) >= 0:
        raise ValueError("Brak zmiany znaku – wybierz inny przedział.")

    for i in range(max_iter):
        c = (a * f(b) - b * f(a)) / (f(b) - f(a))
        if abs(f(c)) < eps:
            print(f"Zbieżność w {i+1} iteracjach")
            return c
        if f(a) * f(c) < 0:
            b = c
        else:
            a = c

    print("Osiągnięto maksymalną liczbę iteracji")
    return c

def main():
    a, b = 0.25, 0.75
    root = regula_falsi(a, b)
    print(f"Pierwiastek ≈ {root}")

if __name__ == "__main__":
    main()


# całkowanie numeryczne metoda trapezow - oblicyc wartosc calki calka od 0 do 1 pierwiastek z 1 + x dx z krokiem h = 1/3
import math

def f(x):
    return math.sqrt(1 + x)

def trapezoid(a, b, h):
    n = int((b - a) / h)
    x_vals = [a + i * h for i in range(n + 1)]
    fx_vals = [f(xi) for xi in x_vals]
    return (h / 2) * (fx_vals[0] + 2 * sum(fx_vals[1:-1]) + fx_vals[-1])

def main():
    a, b = 0, 1
    h = 1/3
    approx = trapezoid(a, b, h)

    exact = 2/3 * ((1 + b)**1.5 - (1 + a)**1.5)

    print(f"Dokładna wartość całki: {exact}")
    print(f"Przybliżenie (trapezy, h=1/3): {approx}")
    print(f"Błąd bezwzględny: {abs(exact - approx)}")

if __name__ == "__main__":
    main()

# calkowanie numeryczne - metoda prostokatow calka od 1 do 4 0.06x^2 + 2 dx
def f(x):
    return 0.06 * x**2 + 2

def rectangle_method(a, b, n, alpha=0):
    h = (b - a) / n
    return h * sum(f(a + i * h + alpha * h) for i in range(n))

def main():
    a=1 
    b=4
    n=10

    exact = 0.02 * 4**3 + 2 * 4 - (0.02 * 1**3 + 2 * 1)
    print(f"Dokładna wartość całki: {exact}")

    for alpha, label in [(0, "lewy"), (0.5, "środek"), (1, "prawy")]:
        approx = rectangle_method(a, b, n, alpha)
        err = abs(exact - approx)
        print(f"\nMetoda prostokątów ({label} punkt, n={n}):")
        print(f"Przybliżenie: {approx}")
        print(f"Błąd bezwzględny: {err}")

if __name__ == "__main__":
    main()
# całkowanie numeryczne - metoda parabol calka od -3 do 1 z sin(x) * e ^ -3x + x ^ 3 dx oraz jej blad maksymalny
import math
from scipy.integrate import quad

def f(x):
    return math.sin(x) * math.exp(-3 * x) + x**3

def simpson(a, b, n):
    if n % 2 != 0:
        raise ValueError("n musi być parzyste (Simpson)")

    h = (b - a) / n
    x = [a + i * h for i in range(n + 1)]
    fx = [f(xi) for xi in x]

    result = fx[0] + fx[-1]
    result += 4 * sum(fx[1:n:2])
    result += 2 * sum(fx[2:n-1:2])
    return (h / 3) * result

def main():
    a, b = -3, 1
    n = 200  
    approx = simpson(a, b, n)

    exact, _ = quad(f, a, b)
    error = abs(exact - approx)

    print(f"Dokładna wartość całki (z scipy): {exact}")
    print(f"Wartość z metody Simpsona (n={n}): {approx:}")
    print(f"Błąd bezwzględny: {error}")

if __name__ == "__main__":
    main()

# interpolacja wielomianowa Lagrange'a lub Newtona dla zestawu wiezlow P1(1,5), P2(2,7), P3(3,6). Znajdz odpowiednia funkcje interpolujaca
import sympy as sym

x = sym.symbols('x')

def lagrange(points):
    poly = 0
    for i in range(len(points)):
        xi, yi = points[i]
        term = yi
        for j in range(len(points)):
            if i != j:
                xj, _ = points[j]
                term *= (x - xj) / (xi - xj)
        poly += term
    return sym.simplify(poly)

def main():
    points = [(1, 5), (2, 7), (3, 6)]

    poly = lagrange(points)
    print("L(x) =", sym.expand(poly))

    for xi, yi in points:
        print(f"L({xi}) = {poly.subs(x, xi)} (oczekiwano {yi})")

if __name__ == "__main__":
    main()

